#!/usr/bin/env node

parcelRequire=function(e,r,t,n){var i,o="function"==typeof parcelRequire&&parcelRequire,u="function"==typeof require&&require;function f(t,n){if(!r[t]){if(!e[t]){var i="function"==typeof parcelRequire&&parcelRequire;if(!n&&i)return i(t,!0);if(o)return o(t,!0);if(u&&"string"==typeof t)return u(t);var c=new Error("Cannot find module '"+t+"'");throw c.code="MODULE_NOT_FOUND",c}p.resolve=function(r){return e[t][1][r]||r},p.cache={};var l=r[t]=new f.Module(t);e[t][0].call(l.exports,p,l,l.exports,this)}return r[t].exports;function p(e){return f(p.resolve(e))}}f.isParcelRequire=!0,f.Module=function(e){this.id=e,this.bundle=f,this.exports={}},f.modules=e,f.cache=r,f.parent=o,f.register=function(r,t){e[r]=[function(e,r){r.exports=t},{}]};for(var c=0;c<t.length;c++)try{f(t[c])}catch(e){i||(i=e)}if(t.length){var l=f(t[t.length-1]);"object"==typeof exports&&"undefined"!=typeof module?module.exports=l:"function"==typeof define&&define.amd?define(function(){return l}):n&&(this[n]=l)}if(parcelRequire=f,i)throw i;return f}({"kLTt":[function(require,module,exports) {
"use strict";var e=this&&this.__awaiter||function(e,t,s,r){return new(s||(s=Promise))(function(o,n){function i(e){try{p(r.next(e))}catch(t){n(t)}}function c(e){try{p(r.throw(e))}catch(t){n(t)}}function p(e){var t;e.done?o(e.value):(t=e.value,t instanceof s?t:new s(function(e){e(t)})).then(i,c)}p((r=r.apply(e,t||[])).next())})},t=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.syncEnv=exports.syncWithSampleEnv=exports.getUniqueVarsFromEnvs=exports.emptyObjProps=exports.writeToSampleEnv=exports.envToString=exports.getObjKeys=exports.fileExists=void 0;const s=require("path"),r=t(require("fs")),o=t(require("os")),n=t(require("parse-dotenv")),i=t(require("globby")),c=t(require("pkg-conf")),p=s.resolve(process.cwd(),".env"),l=s.resolve(process.cwd(),".env.example");exports.fileExists=(e=>r.default.existsSync(e)),exports.getObjKeys=(e=>Object.keys(e)),exports.envToString=(e=>exports.getObjKeys(e).map(t=>`${t}=${e[t]||""}`).join(o.default.EOL).replace(/(__\w+_\d+__=)/g,"")),exports.writeToSampleEnv=((e,t)=>{try{r.default.writeFileSync(e,exports.envToString(t))}catch(s){throw new Error(`Sync failed. ${s.message}`)}}),exports.emptyObjProps=(e=>{const t=Object.assign({},e);return Object.keys(t).forEach(e=>{if(t[e].includes("#"))if(t[e].match(/(".*"|'.*')/g)){const s=t[e].split(/(".*"|'.*')/);t[e]=s.slice(-1)[0].trim()}else{const s=t[e].split("#");t[e]=`#${s.slice(-1)[0]}`}else e.startsWith("__COMMENT_")||(t[e]="")}),t}),exports.getUniqueVarsFromEnvs=((t,s)=>e(void 0,void 0,void 0,function*(){let e=(yield c.default("sync-dotenv")).preserve||[];const r=new Set(exports.getObjKeys(t));return[...Array.from(r).map(e=>e.startsWith("__COMMENT_")?{[e]:t[e]}:{[e]:s[e]||""}),...exports.getObjKeys(s).map(e=>({[e]:s[e]})).filter(t=>e.includes(exports.getObjKeys(t)[0]))]})),exports.syncWithSampleEnv=((t,s)=>e(void 0,void 0,void 0,function*(){let e=exports.emptyObjProps(n.default(t,{emptyLines:!0,comments:!0})),r=n.default(s);const o=yield exports.getUniqueVarsFromEnvs(e,r);let i={};o.forEach(e=>{let[t]=exports.getObjKeys(e);i[t]=e[t]}),exports.writeToSampleEnv(s,i)}));const a=(e,t=1)=>Promise.reject({message:e,code:t});exports.syncEnv=((t,r,o)=>e(void 0,void 0,void 0,function*(){if(t&&(".env"===t||".env"===s.basename(t)))return a("Cannot sync .env with .env");const e=o?i.default.sync(o).map(e=>s.resolve(process.cwd(),e)):[s.resolve(process.cwd(),t||l)];let n=r?exports.fileExists(r)?r:null:p;if(null===n)return a(`${r} not found`);if(!r&&!exports.fileExists(n))return a(".env doesn't exists");if(!e.length)return a(`${o} did not match any file`);if(!exports.fileExists(e[0]))return a(`${t||s.basename(l)} not found`);const c=n;for(let t of e)yield exports.syncWithSampleEnv(c,t);return Promise.resolve(e.join(" "))}));
},{}],"QCba":[function(require,module,exports) {
"use strict";var e=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const n=e(require("child_process")),t=e(require("meow")),s=require("./lib"),l=t.default('\n\tUsage: sync-dotenv [options]\n\n\tOptions:\n\t\n\t-e, --env file .......... .env file location\n\t-s, --sample file ....... alternate sample env file to sync with\n\t-S, --samples "file.*" ........ alternate sample env files pattern to sync with\n\n\n\tNote: If options is omitted, sync-dotenv will attempt to sync .env \n\twith .env.example in the current working directory.\n\n\tExamples:\n\t\n\t$ sync-dotenv \n\t$ sync-dotenv --sample .env.development\n\t$ sync-dotenv --env server/.env --sample example.env\n\t$ sync-dotenv --samples ".env.*"\n',{flags:{sample:{type:"string"}}}),{sample:o,s:a,env:i,e:r,samples:c,S:p}=l.flags;s.syncEnv(o||a,i||r,c||p).then(e=>n.default.exec(`git add ${e}`)).catch(({message:e,code:n})=>{console.log(e),process.exit(n)}),exports.default=s.syncEnv;
},{"./lib":"kLTt"}]},{},["QCba"], null)